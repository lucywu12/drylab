from Bio.Alphabet import IUPAC
from todolist.SPEA2.Codon_Use import *
from todolist.SPEA2.Bio_Structures import GC_content, RestrictionEnzymes
from todolist.SPEA2.SPEA2_Seq_Algo import optimize_with_strength_pareto_evolutionary_algorithm


def test_main():
    print("start test main")
    population_size = 10
    archive_size = 25
    problem_size = 8
    probability_crossover = 0.15
    probability_mutation = 0.05
    ancestor_sequence = Seq.Seq("ATGACTGCACTGGCTAGCTGTCATACTTGTAGCACTACTCCTACTCGTCGTGGTCTGTGCGGCCGTCCTACTTCTCTGGAATCCGCCGCTTCTCGTTGCGCTACCCACTATTCCGCATCTACCAGCGAGTGCGTGGCTAAATCTACCGCAGCTTCTCGTCGTCAACCGACCTGGACCCCACGTCGTGGTGTAGCTACCAAAGCCCTGTTCGACCCGCCGCCATTCAAACCTGAAAAACTGGCTGTACTGCTGGCTGCAGGTACCAGCTCTCTGGAACCGGCTCCTCCACGCTCTCGTAAGTATACCCTGACCCACAACGACATCACTGGCAACCTGCGTCTGACCATCGGCGCAGATTACAATCAACAACAAATCTCTGGCTTCTATACTCGCCTGCTGCGTGACGAAGTTATCGCCGAGTGGGTTGCAGTTGGCGCTTCTGGTTATGCGCTGCACGTTTACTGCCACGTAAGCGGTGAAGAACGTTGGCTGGCTCCGCCTCTGCTGCGTAACTACATCTTCCGTCGCGAGATGCCACTGGTTCTGGATACTATCGTTTATGCTGATCGTCAACTGCTGCAGCGTCAGCCTGAACTGGCGCGTGCTCAAGTCTATATTCATTTCCAGAGCTCTGTCCGTGAACTGGATACCGTGGAATATTGGGGCCTGCTGGGCGAACGTTCTACCTGGCCAAAAGGCCCAACTTCTATTCTGCTGCGCACCATCTACGCTATCATCGGTTGGCCTCCATACCTGGAAGCACTGCCGGCAGACCTGTCCATTGATCTGCCGGATGAAGTCCGTGATCTGGAGGAGGCAGTACGCTGGCAGCAGCAGCAGCGTCAACAAGGTCCTCGTCAAGAAGGTCTGCGCCAAGAAGGCCGCCAAGAAGCACGCCAAGAAGGTCGCCAGGAAGGTCGTCAAGAAGCTCGTCAGGAGGGTCGTCAAGAGGGTCGTCAGGAAGCGTGGCAAGAAGGTTGGCAGGATGGTTGGCAGGAGGGCCGTCAGGAGGTTGAACAGCTGCTGCGTCAGGAGCGCCGTAAAGCTGAACGCGGTCGTGAAGCTCGTGAGCGTGATCGTGAAGCTGAACGTGCTCGTGAACGCGAACCGTCTGCGGCTGTTGCGGGTACTCAGGCACTGGCACGTGCAGAAGCTGCTGTCCCTGTAGTTGAACCGGAAGAAGATCAGCAGCAGCCGCAACAGGGTGTTCCTGGTGCTGCACCGGACGCTCGTCAGGAATGGCAGCGTCAAGCTGCATCTCATGGTGCAGCTCCTGTTCAGGCTGCTGCTCCAGCACCTCCAACCGGTAGCTATCCACATAACGGCGCTCCGGCTTCTGAATCTACCCCATGTTCTGCTGGTACCAGCGCAGGTGAAGAAGCAGGTCGTTGGCCTGGTCGTAGCTCTACTAATGGTGCCGGCGTGCTGCGTCGTTCTGGTACTAGCTCCAGCTCTAGCAGCTCTGGTAACGGTCTGCTGCCAGCAGCTTCTCAGGCACCGGTTAACGGTTATAGCCTGAATGGCTCCGCGGCAGGTCGTTCTTCTCTGGAAGCTGGTGGCCTGAATGGTGTTGCACCTGGTGCTGGTGCAGAGGCACGTGCTTACGAACGTCGTGCTGCTCCTACTGTTGCTACTGCTGTTGCACCGTGTGCCGCTTCTGATGGTCAGCCGTGTAGCGGTGGTCCAGGTTGTTCCTGTGATGCTGCAGATCAGGCGCCGGAAGTTCCTGGTCGTGCAACCCCAGCTGCTGTTGCATCCGCAGGTAGCCCGGTTGGTCTGCCAGCTGCTCTGTCTGTCGAATTTAGCGCAGCCGCTGAACTGCTGGTGGGTACTGGTAGCCGTGCGGTTGCTCGTTCCTCCGCTAGC", IUPAC.ambiguous_dna)
    codon_use_table, host_profile, codon_relative_adaptiveness = host_codon_usage("413997", 0.1, None)
    gc_parameters = GC_content[2]
    restriction_sites = RestrictionEnzymes("NdeI XhoI HpaI PstI EcoRV NcoI BamHI".split())
    print("parameters set")
    print(optimize_with_strength_pareto_evolutionary_algorithm(population_size, archive_size, problem_size,
                                                               probability_crossover, probability_mutation,
                                                               ancestor_sequence, codon_use_table, gc_parameters,
                                                               restriction_sites))
